# push 동작을 할떄 동작하도록
on: push
name: Test and Make Debug APK
jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          distribution: 'zulu'
          java-version: '12.x'
      - uses: subosito/flutter-action@v1
        with:
          #          flutter-version: '2.8.0'
          channel: 'stable'

      # google-json test
      - name: Make google-services.json
        run: echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/google-services.json
      # env 파일 생성로직..
      - name: Setting .env
        run: |
          echo "TEMP_GOOGLE_KEY=${{ secrets.TEMP_GOOGLE_KEY}}" >> .env
          cat .env
      - run: flutter pub get
      - run: flutter test

      # apk 작성
      - name: build apk
        run: flutter build apk --debug

      #      - name: Create apk(?)
      #        uses: ncipollo/release-action@v1
      #        with:
      #          artifacts: "build/app/outputs/apk/debug/*.apk"
      #          token: ${{ secrets.TOKEN }}
      #
      #      - name: upload artifacts
      #        uses: actions/upload-artifact@master
      #        with:
      #          name: apk-debug
      #          path: build/app/outputs/apk/debug/app-debug.apk

      - name: Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.3.2
        with:
          appId: ${{ secrets.ANDROID_FIREBASE_APP_ID }}
          token: ${{ secrets.FIREBASE_TOKEN}}
          groups: testers
          #          file: build/app/outputs/apk/debug/*.apk
          file: build/app/outputs/flutter-apk/app-debug.apk

        # test...
      #      - name: testing..
      #        run: flutter build apk --debug
      #      - name: upload debug artifact to Firebase App Distribution
      #        run: firebase appdistribution:distribute android/app/build/outputs/apk/debug/app-debug.apk
      #        --token ${{secrets.FIREBASE_TOKEN}}
      #        --app ${{secrets.FIREBASE_APP_ID}}
      #        --groups "trusted-testers"
      #        --release-notes "Test server"

      - name: Deploy Preview Channel
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          #          repoToken: ${{ secrets.TOKEN }}
          #          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_TEST_KEY }}
          repoToken: '${{ secrets.TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_FLUTTERSAMPLEAPP_41C6E }}'
          expires: 7d
          projectId: fluttersampleapp-41c6e
          channelId: preview
          entryPoint: "android"


  #      - run: flutter build apk

#  spm-dep-check:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Check Swift package dependencies
#        uses: MarcoEidinger/swift-package-dependencies-check@1.0.0
#        with:
#          isMutating: true
#      - name: Create Pull Request
#        if: failure()
#        uses: peter-evans/create-pull-request@v3
#        with:
#          commit-message: 'chore: update package dependencies'
#          branch: updatePackageDepedencies
#          delete-branch: true
#          title: 'chore: update package dependencies'
#          body: ''

  build_ipa:
    name: set environment
    runs-on: macos-latest
    #    env:
    #      XC_WORKSPACE: ${{ 'ios/Runner.xcworkspace' }}
    #      XC_SCHEME: ${{ 'ios/Runner' }}
    #      XC_ARCHIVE: ${{ 'ios/Runner.xcarchive' }}

    env:
      SHEME: Runner
      BUILD_CONFIGURATION: Debug
      XC_VERSION: ${{ '13.2' }}

    steps:
#      - name: Select latest Xcode
#        run: "sudo xcode-select -s /Applications/Xcode_$XC_VERSION.app"
      # google-json test
#      - name: Make GoogleService-info.plist
#        run: echo '${{ secrets.GOOGLE_SERVICES_JSON }}' > android/app/google-services.json

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - uses: actions/checkout@v2

      #      - run: rm -r ~/.pub-cache
      #      - run: xcodebuild -create-xcframework -framework

      - name: pod install
        run: |
          cd ios
          pod deintegrate
          pod install
          cd ..

      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.CERTI_BASE_SECOND }}
          p12-password: ${{ secrets.APPLE_SECRETS }}


      - name: Install the provisioning profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISION_BASE }}
        run: |
          #          create variables
               PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          #          import provisioning profile from secrets
               echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          #          apply provisioning profile
               mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
               cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

#      - run: xcodebuild -create-xcframework -framework

      #      - run: flutter clean
      - run: flutter pub get
      - run: flutter test

#      - name: Build iOS App
#        run: |
#          flutter build ios --debug --no-codesign
#          cd build/ios/iphoneos
#          mkdir Payload
#          cd Payload
#          ln -s ../Runner.app
#          cd ..
#          zip -r app.ipa Payload
#          pwd
#
#      - name: Publish iOS Artefacts
#        uses: actions/upload-artifact@v1
#        with:
#          name: debug-ios
#          path: build/ios/iphoneos/app.ipa

#      - name: Firebase App Distribution
#        uses: wzieba/Firebase-Distribution-Github-Action@v1.3.2
#        with:
#          appId: ${{ secrets.ANDROID_FIREBASE_APP_ID }}
#          token: ${{ secrets.FIREBASE_TOKEN}}
#          groups: testers
#          #          file: build/app/outputs/apk/debug/*.apk
#          file: build/ios/iphoneos/app.ipa

#####################################################

      - name: Build Flutter
        run: flutter build ios --debug --no-codesign

      - name: Build resolve Swift dependencies
        run: xcodebuild -resolvePackageDependencies -workspace ios/Runner.xcworkspace -scheme ${{ env.SHEME }} -configuration ${{ env.BUILD_CONFIGURATION }}

      # 여기가안됨...
#      - name: Build xArchive
#        run: |
#          xcodebuild -workspace ios/Runner.xcworkspace -scheme ${{ env.SHEME }} -configuration ${{ env.BUILD_CONFIGURATION }} DEVELOPMENT_TEAM=${{ env.TEAM_ID }} -sdk 'iphoneos' -destination 'generic/platform=iOS' -archivePath build-output/app.xcarchive PROVISIONING_PROFILE=106bdc42-25d3-4f77-a431-e69c56fc0b49 clean archive CODE_SIGN_IDENTITY="Apple Distribution: Damien Aicheh"
#
#      - name: Building IPA
#        run: flutter build ipa --debug --export-options-plist=ios/ExportOptions.plist

      - name: xArchive test
        run : |
          xcodebuild clean archive -workspace ios/Runner.xcworkspace -scheme ${{ env.SHEME }} -configuration Debug -archivePath ios/xcarchive
          cd ios
          ls
          cd ..
          cd build
          ls

#          xcodebuild clean archive -workspace ios/Runner.xcworkspace -scheme ${{ env.SHEME }} -sdk 'iphoneos' -configuration Debug archive -archivePath build-output/app.xcarchive

      - name: Export ipa
        run: |
          xcodebuild -exportArchive -archivePath ios/xcarchive.xcarchive -exportOptionsPlist ios/ExportOptions.plist -exportPath . -allowProvisioningUpdates
          pwd
#        run: xcodebuild -exportArchive -archivePath build-output/app.xcarchive -exportPath build-output/ios -exportOptionsPlist ios/ExportOptions.plist

#      - name: Publish iOS Artefacts
#        uses: actions/upload-artifact@v1
#        with:
#          name: debug-ios
#          path: build-output/ios


################################################

      #      - env:
      #          ENCRYPTED_CERT_FILE_PATH: ${{ '.github/secrets/CertificateSigningRequest.certSigningRequest.gpg' }}
      #          DECRYPTED_CERT_FILE_PATH: ${{ '.github/secrets/CertificateSigningRequest.certSigningRequest.p12' }}
      #
      #          ENCRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/test1.mobileprovision.gpg' }}
      #          DECRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/test1.mobileprovision' }}
      #
      #          # certification export key
      #          CERT_EXPORT_KEY: ${{ secrets.APPLE_SECRETS }}
      #
      #      # 証明書の生成
      #      - name: Import Provisioning Profile
      #        run: | # 複数行の run を書きたい場合はこうする 以下、Provisioning Profilesを置くべきディレクトリにデコードしている
      ##          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      ##          echo -n ${{ secrets.PROVISIONING_PROFILE }} | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/distribution.mobileprovision
      #          gpg -d -o "$DECRYPTED_CERT_FILE_PATH" --pinentry-mode=loopback --passphrase "$CERT_ENCRYPTION_KEY" "$ENCRYPTED_CERT_FILE_PATH"
      #          gpg -d -o "$DECRYPTED_PROVISION_FILE_PATH" --pinentry-mode=loopback --passphrase "$PROVISIONING_ENCRYPTION_KEY" "$ENCRYPTED_PROVISION_FILE_PATH"
      #
      #
      #      # 署名をする
      #      - name: Import Code-Signing Certificates
      #        uses: Apple-Actions/import-codesign-certs@v1 # 外部パッケージを使っている
      #        with:
      #          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
      #          p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}
      #
      #      # ipa ファイルの出力
      #      - name: Create ipa file
      #        # GITHUB_RUN_NUMBER をビルドナンバーに指定することで被りがないようにしている。
      #        run: flutter build ipa --export-options-plist=ExportOptions.plist --build-number ${GITHUB_RUN_NUMBER}


      #      - run: rm -r ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved

      #      - name : build ipa
      #        run: flutter build ios --debug --no-codesign

  #      - name: Start xcode build
  #        run: |
  #          xcodebuild clean test -project ios/Runner.xcodeproj -scheme ios -destination 'platform=iOS Simulator,name=iPhone 11 Pro,OS=14.4'

  #      - name: Build iOS App
  #        run: flutter build ios --debug --export-options-plist=ios/exportOptions.plist

  #        run: |
  #          flutter build ios --no-codesign
  #          cd build/ios/iphoneos
  #          mkdir Payload
  #          cd Payload
  #          ln -s ../Runner.app
  #          cd ..
  #          zip -r app.ipa Payload




  #  beta_apk:
#    name: Upload Android Beta to Firebase App Distribution
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v1
#
#      - name: set up JDK 1.8
#        uses: actions/setup-java@v1
#        with:
#          java-version: 1.8
#
#      - name: Download Artifact
#        uses: actions/download-artifact@master
#        with:
#          name: apk-build
#          artifacts: "build/app/outputs/apk/debug/*.apk"
#          token: ${{ secrets.TOKEN }}
#
#      - name: Upload APK
#        uses: wzieba/Firebase-Distribution-Github-Action@v1.0.0
#        with:
#          appId: fluttersampleapp-41c6e
#          token: ${{secrets.FIREBASE_SERVICE_ACCOUNT_FLUTTERSAMPLEAPP_41C6E}}
#          group: testers
#          file: app-debug.apk


